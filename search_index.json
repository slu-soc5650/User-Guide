[
["index.html", "SOC 4650/5650 User’s Guide Preface", " SOC 4650/5650 User’s Guide Christopher Prener, Ph.D. 2017-01-28 Preface This text is a companion document for SOC 4650/5650 - Introduction to Geographic Information Sciences. It is designed to help you be successful in this course. The idea behind a course User’s Guide is to create a reference for many of the intangible, subtle or disparate skills and ideas that contribute to being a successful researcher. In creating a User’s Guide, I draw inspiration from the work of Donald Knuth.1 Knuth has discussed his experiences in designing new software languages, nothing that the developer of a new language …must not only be the implementer and the first large-scale user; the designer should also write the first user manual… If I had not participated fully in all these activities, literally hundreds of improvements would never have been made, because I would never have thought of them or perceived why they were important… While there is nothing particularly new about what I am writing here, and I am certainly not developing a new language for computing, the goal of the User’s Guide remains similar to Knuth’s experience. By distilling some of key elements for making a successful transition to being a professional developer of knowledge rather than a casual consumer, I hope to both improve the course experience itself and also create an environment that fosters a successful learning experience for you. If you read through the course objectives included in the syllabus, you will note that creating maps is only one of them. As much as this is a GIS course, it is a course in research methods. In particular, we are concerned with high quality research methods and the process of conducting research. We therefore focus on a combination of mental habits and technical practices that make you a successful researcher. Some of the skills and techniques that we will discuss this semester are not taught as often in graduate programs. Instead, they are often the products of “learning the hard way”. These “habits of mind and habits of method” are broadly applicable across methodologies and disciplines. Donald Knuth is the developer of TeX, a computer typesetting system that is widely used today for scientific publishing in the form of LaTeX. He also established the concept of literatue programming, which forms the basis of some of the practices we will follow with Stata this semester.↩ "],
["license.html", "License", " License Copyright © 2016-2017 Christopher G. Prener This work is licensed under a Creative Commons Attribution 4.0 International License. -->"],
["gettingStarted.html", "1 Getting Started", " 1 Getting Started Before you begin the semester, there are a number of things that I recommend that you do to help set yourself up for success. Before you do anything else, you should read through the Syllabus and the Reading List. Make sure you have a good sense of what is required for the course. If you have questions, bring them to the first day of class! "],
["prep-your-computer.html", "1.1 Prep Your Computer", " 1.1 Prep Your Computer Before you do anything else for this course, make sure you get your computer ready for the work you are about to undertake: Make sure your operating system is up-to-date. If you are able, I would also recommend upgrading your computer to the most recent release of its operating system that the computer can run. We’ll be sharing computer files throughout the semester, so you should ensure that you have functioning anti-virus software and that it is up-to-date. You’ll also need to download files, so you’ll need to make sure you have some free space on your hard drive. If you have less than 10GB of free space, you should de-clutter! Make sure you know how to access your computer’s file management system. On macOS, this means being comfortable with Finder.app. On Windows, this means being comfortable with Windows Explorer. This of course assumes that you own a computer. Owning a computer is not required for this course. All students who are enrolled in SOC 4650 or SOC 5650 will be given 24-hour swipe access (just what you always wanted!) to Morrissey Hall to facilitate access to lab computers. "],
["create-accounts.html", "1.2 Create Accounts", " 1.2 Create Accounts There are two major web services that we will use this semester, and you’ll need to create accounts for both: GitHub - you can sign-up at GitHub.com. Once you’ve signed up, fill out your profile, set-up two-factor authentication, and let Chris know (via email) what your user name is. Once he has it, he can add you to the SOC 4650/5650 organization. Slack - you can ask Chris (via email) for an invitation to sign-up for our team. Once the sign-up process is complete, you can log-in by going to our team’s Slack site. Fill out your profile, set-up two-factor authentication, and change your timezone. "],
["download-and-install-software.html", "1.3 Download and Install Software", " 1.3 Download and Install Software There are a number of software applications that we will use this semester. Most of them are free, and I recommend downloading those free ones right away. All of these applications are available for macOS and Windows. Atom - Atom is a flexible, open-source text editor that is produced by GitHub. You can download it from Atom’s website. GitHub Desktop - GitHub makes a desktop client that you can use to easily interact with repositories that are stored on the site. You can download it from GitHub’s website after you sign-up for an account there. You’ll need that account information to complete the desktop client’s set-up process. Slack - Slack has a number of applications for desktop and mobile operating systems. I recommend downloading Slack on your personal computer, and optionally installing it on your mobile device as well. You can download their desktop applications from their website and the mobile applications from your App Store. For Graduate Students only If your computer meets the operating system requirements for ArcGIS and you think you’d benefit from having access to the software at home, let Chris know (via email). If you are in the Public and Social Policy Ph.D. program and your computer meets the hardware and software requirements for Stata, you should consider purchasing it for yourself. I recommend purchasing a perpetual license for Stata/IC. This is the most cost-effective solution for typical students. "],
["buy-course-materials.html", "1.4 Buy Course Materials", " 1.4 Buy Course Materials Books There are three required books for this course: Brewer, Cynthia. 2015. Designing Better Maps: A Guide for GIS Users. Redlands, CA: ESRI Press. ISBN-13: 978-1589484405; List Price: $59.99; ebook versions available. Gorr, Wilpen L. and Kristen S. Kurland. 2013. GIS Tutorial 1: Basic Workbook. 10.3.x edition. Redlands, CA: ESRI Press. ISBN-13: 978-1589484566; List Price: $79.99; ebook versions available. Thomas, Christopher and Nancy Humenik-Sappington. 2009. GIS for Decision Support and Public Policy Making. Redlands, CA: ESRI Press. ISBN-13: 978-1589482319; List Price: $24.95. There is one additional book that is optional: Mitchell, Michael N. 2010. Data Management Using Stata: A Practical Handbook. College Station, TX: Stata Press. ISBN-13: 978-1597180764; List Price: $48.00. Buying Mitchell (2010) is highly recommended for graduate students who will continue using Stata in the future and those who are concerned about the command-line interface. I recommend waiting for a week or two before purchasing this. External Media You will need a USB external storage device (either an external hard drive or a thumb-style drive) that has at least 20GB of storage capacity. This will be used for storing spatial data for this course. "],
["download-course-data.html", "1.5 Download Course Data", " 1.5 Download Course Data Mots of the course data is available for download via Dropbox in a single .zip file. If you want, you can let Chris know (via email) that you’d like to download these data before the beginning of the semester. Once you download them, extract the data from the .zip file and transfer them to your external storage device. -->"],
["approaching-this-course.html", "2 Approaching this Course", " 2 Approaching this Course Students have varying experiences learning GIS techniques. For some, the spatial logic and programming that are the foundation for GIS methods come naturally. For others, being introduced to these concepts can be an anxiety producing experience. I am fond the phrase “your mileage will vary” for describing these differences - no two students have the exact same experience taking a methods course. "],
["zen-and-the-art-of-data-analysis.html", "2.1 Zen and the Art of Data Analysis", " 2.1 Zen and the Art of Data Analysis One of the biggest challenges with this course can be controlling the anxiety that comes along with learning new skills. ArcGIS processes, Markdown syntax, and Stata commands can seem like foreign alphabets at first. Debugging Stata do-files can be both challenging and a large time suck, in part because you are not yet fluent with this language. Imagine trying to proofread a document written in a language that you only know in a cursory way but where you must find minute inconsistencies like misplaced commas. For this reason, I also think it is worth reminding you that many students in the social sciences struggle with quantitative methods at first. It is normal to find this challenging and frustrating. I find that students who can recognize when they are beginning to go around in circles are often the most successful at managing the issues that will certainly arise during this course. Recognizing the signs that you are starting to spin your wheels and taking either ten minutes, an hour or two, or a day away from GIS coursework is often a much better approach than trying to power through problems. "],
["an-apple-a-day.html", "2.2 An Apple a Day", " 2.2 An Apple a Day Being able to walk away from an assignment for a day requires excellent time management. If you are waiting until the night before or the day of an assignment’s due day to begin it, you give yourself little room for errors. I recommend approaching this course in bite size chuncks - a little each day. The most successful students do not do all of their reading, homework, and studying in a single sitting. I find that this approach not only creates unnecessary anxiety around assignments, it also dramatically limits the amount of course material you can absorb. Keep in mind that I expect the median student to spend approximately six hours on work for this class each week (twice the amount of in-class time). A sample approach to the class might look something like this: Tuesday: class Wednesday: finish lab Thursday: Start problem set Friday: Finish problem set Saturday: First reading Monday: Second reading "],
["reading-with-purpose.html", "2.3 Reading with Purpose", " 2.3 Reading with Purpose The book and article reading assignments for this course are different from most of the other reading you will do in your graduate program because they are often very technical. Students who are most successful in this course read twice. Read the first time to expose yourself to the material, then take a break from the reading. During this first read, I don’t recommend trying to complete the example problems or programming examples. Focus on the big picture - what are the concepts and ideas that these readings introduce? During the second read, try to focus in in the details - what are the technical details behind the big picture concepts? I recommend doing this second read with your computer open. Follow along with the examples and execute as much of them as you can. By using this second read through as a way to test the waters and experiment with the week’s content, you can come into the lecture better prepared to take full advantage of the class period. Students who follow this approach are able make important connections and focus on the essential details during lectures because it is their third time being exposed to the course material. They are also in a much stronger position to ask questions. "],
["active-lectures-and-labs.html", "2.4 Active Lectures and Labs", " 2.4 Active Lectures and Labs During lectures, I introduce many of the same topics that your readings cover. This again is intentional - it gives you yet another exposure to concepts and techniques that are central to geospatial science. One mistake students sometimes make is focusing on the details of how to do a particular task rather than focusing on when a task should be done. If you know when a task is needed but cannot remember how to do it in Stata or ArcGIS, you can look this information up. Conversely, detailed notes on executing Stata commands may not be helpful if you are unsure when to use a particular skill. There is no penalty in this course for not knowing how to execute a command from memory; this is what reference materials are for. The most successful students will therefore focus on when a particular skill is warranted first before focusing on how to execute that skill Getting experience with executing tasks is the purpose of the lab exercises. Time for beginning these exercises is given at the end of each class meeting, and replication files will be posted on GitHub for each lab. "],
["typefaces-and-examples.html", "2.5 Typefaces and Examples", " 2.5 Typefaces and Examples 2.5.1 Typefaces and Fonts Technical publications that describe scientific computing processes use a monospaced typewriter style typeface to refer to commands (inputs) and results (outputs). In some documents, like lecture slides and cheat-sheets, I may highlight a command by using a to increase the visibility of the command name itself. The typewriter typeface is also used to refer to filenames (e.g. auto.dta) or filepaths (e.g. C:\\Users\\JSmith\\Desktop). Finally, we will use the typewriter typeface to refer to GitHub repositories (e.g. Core-Documents, the repository that contains this file). Technical publications use italicized text to refer to text that is meant to be replaced. These references will typically appear in a typewriter typeface since they are often part of commands. For example, describe *varname* (with varname italicized) indicates that you should replace the text varname with the appropriate variable name from your dataset. These publications also use a sans serif typeface to refer to areas of the user interface, menu items, and buttons. I cannot replicate that here because of the publishing software that I use, but you’ll notice this text in course documents. Technical documents also use a sans serif typeface to refer to keyboard keys (e.g. Crtl+C) where the plus sign (+) indicates that you should press multiple keys at the same time. A sans serif typeface combined with a right facing triangle-style arrow (&gt;) is used to refer to actions that require clicking through a hierarchy of menus or windows (e.g. File &gt; Save). 2.5.2 Examples Throughout the semester, I will give you examples both in lecture slides and in an example do-file. Examples in lectures and course documents can be easily identified by their use of the typewriter typeface: . summarize mpg Variable | Obs Mean Std. Dev. Min Max -------------+--------------------------------------------------------- mpg | 74 21.2973 5.785503 12 41 Examples will almost always use the file census.dta, which comes pre-installed with Stata. To open it, use the sysuse command: sysuse census.dta, clear. This allows you to easily recreate examples by minimizing dependencies within do-files. -->"],
["protecting-your-work.html", "3 Protecting Your Work", " 3 Protecting Your Work Each semester that I teach this course or SOC 5050 (Quantitative Analysis), two things happen. The first thing that happens is that students regularly lose files. The effects of losing files can range from being a minor frustration to a major headache depending on the file in question. Losing files often results in downloading multiple copies of the same data and recreating work. Both of these are wastes of your time. Moreover, files are rarely gone. They are typically just misplaced. This is bad for reproducibility, particularly when you happen across multiple versions of the same file and have to sort out which version is the version you last worked on. The second thing that happens is that students lose their thumb drives. Depending on the timing of this loss, this can again range from being a minor frustration (very early in the semester) to being downright anxiety attack producing (last few weeks of the semester). Recreating an entire semester’s worth of work on the final project is both a tremendous waste of your time and a particularly unpleasant experience. Fortunately, I have never had a student’s computer hard drive die during the course of the semester. However, I assume that if I teach this course long enough a hard drive failure will indeed occur. The backup provider Backblaze has analyzed their own hard drives and found that about 5% of drives fail within the first year. After four years, a quarter (25%) of drives in their data center fail. Similarly, it is only a matter of time before a student’s computer is stolen along with all of their hard work. A less likely though still very plausible scenario involves the destruction of a student’s belongings (computer and thumb drive included) in a fire, car accident, or natural disaster. Despite the likelihood that you will at some-point lose a thumb drive (if not during this semester than sometime down the road) and the near certainty that your computer’s hard drive will eventually fail if a rogue wave does not get it first, few students and faculty take these risks seriously. While you cannot prevent many of these things from happening, I want to suggest to you that you can take some simple steps to sure that when (not if) they happen, you are well prepared to get back to work with minimal disruption. "],
["creating-a-sustainable-file-system.html", "3.1 Creating a Sustainable File System", " 3.1 Creating a Sustainable File System In his excellent document The Plain Person’s Guide to Plain Text Social Science, Kieran Healy describes two important revolutions in computing that are currently taking place. One of them is the advent of mobile touch-screen devices, which he notes hide from the user both the workings of the operating system and (especially) the structure of the file system where items are stored and moved around. For most users, I would argue that this extends to their laptop or desktop computers as well. I would venture to guess that the majority of my students are used to keeping large numbers of files on their desktops or in an (distressingly) disorganized Documents folder. For research, particularly quantitative research, such an approach to file management is unsustainable. It is difficult to produce any research, let alone work that is reproducible, without an active approach to file management. 3.1.1 Create a Single Course Directory The most successful approach to organizing files is to identify one and only one area that you will store course files in. Having files scattered around you hard drive between you Desktop directory, Downloads, Documents, and a half dozen other places is a recipe for lost files. It can also add complexity to the task of backing these files up. I recommend naming this directory simply SOC4650 or SOC5650. This is short, has no punctuation or spaces (which can create conflicts with software), and explicitly connects the directory to this course as opposed to other courses you may take that are also GIS courses (a good reason to avoid naming the directory GIS!). 3.1.2 Approach Organizing Systematically Within your single course directory, I recommend following much of Long’s (2009) advice on organization. Approach this task systematically and mindfully. This approach begins with having a number of dedicated subfolders within your course directory: /SOC5650 /Core-Documents /Data /DoeAssignments /FinalProject /Labs /Lectures /Notes /ProblemSets /Readings /Software /WeeklyRepos Note again how these directories are named - there are no spaces, special characters, and the names are deliberately short but specific. For a directory with two words (FinalProject or ProblemSets), I use what is known as camelCase to name the file where the second (any any subsequent) words have their first character capitalized. You could also use dash-case (Core-Documents) or snake_case (Core_Documents) as a naming strategy. Regardless of which of these approaches you take, try to use it consistently. The course data release is embedded in an otherwise empty folder structure that mirrors this layout. When you download these data and the accompanying directories, un-zip them and move the entire contents to the root of your thumb drive or external hard drive. If you are registered for SOC 4650 and want your directory to match your registration, feel free to rename it SOC4650. 3.1.3 The Core-Documents Directory This directory will not be included in the folder structure that you download along with the course data release. This directory will be added to your file system during Lab-03, when it is cloned from GitHub. A cloned directory is one that retains a digitial link to the data stored on GitHub, meaning that it can be easily updated if changes are made. This will be explained in greater depth in the next chapter of the User’s Guide. Do not edit the files in these repositories. 3.1.4 The Data Directory The data directory should have copies of all original data and their documentation. Most of these data are included in the initial data release, but you will have to add some additional data to this directory over the course of the semester. The data in this directory should be used as needed but not altered (one of the of the “good enough” research practices from the previous chapter). 3.1.5 The DoeAssignments Directory Like the Core-Documents repository, this will not be included in the course data release. You will add it to your file system during Lab-03. It will also have a different name - your last name instead of ‘Doe’. Once you add it, it will contain a number of subdirectories: /SOC5650 /DoeAssignments /FinalProject /Documentation /Memo /PosterDraft /PosterFinal /Labs /Lab-01 ... /Lab-16 /ProblemSets /PS-01 ... /PS-10 The FinalProject directory contains submission folders for each component of the final project. If you a registered for SOC 4650, your directory will look like what appears above. Students registered for SOC 5650 will have three additional subfolders for deliverables related to the final paper element of the course. The Labs and ProblemSets directories have subfolders dedicated to the 26 individual assignments you’ll have to submit over the course of the semester. These directories are intended to store only the deliverables that are requested in each assignment’s directions. All other files related to each assignment should be stored elsewhere in your folder structure. 3.1.6 The FinalProject Directory The final project directory should be a microcosm of the larger directory structure, with most major directories replicated so that your final project files have a dedicated, organized home: /SOC5650 /FinalProject /Data /DataAnalysis /Documentation /Memo /Notes /Poster /Readings You’ll notice that there are a number of new directories dedicated to specific aspects of the project. SOC 5650 students: you will want to add directories for the /AnnotatedBib and /Paper aspects of the assignment. I also recommend using some type of bibliography software. (Endnote, for example, can be obtained for free by SLU students). Whatever application you choose, keep its primary database for your project in the Readings folder along with copies of all .pdf readings. 3.1.7 The Labs Directory This directory contains subfolders for each of the sixteen lab assignments for this course. Save all of the associated materials for each lab assignment here, including text files, documentation, map files and output, data tables, and any new data that you are asked to create and save. 3.1.8 The Lectures Directory This directory contains subfolders for each of the sixteen weeks of the course. When we create new data files, make maps, or write code during lectures, save these documents in the appropriate week’s folder. 3.1.9 The Notes Directory Use this as a home for course notes. 3.1.10 The ProblemSets Directory This directory contains subfolders for each of the ten problem set assignments for this course. Save all of the associated materials for each problem set here, including text files, documentation, map files and output, data tables, and any new data that you are asked to create and save. 3.1.11 The Readings Directory Use this as a home for .pdf copies of course readings. 3.1.12 The WeeklyRepos Directory Clone each of the weekly repos to this directory, and sync them when updates are made to ensure you have the latest versions of files. Do not edit the files in these repositories. If you want or need to work with them, make a copy and save it into the relevant assignment directory. "],
["backing-up-your-data.html", "3.2 Backing Up Your Data", " 3.2 Backing Up Your Data There are a number of different ways to think about backing up your data. The most successful backup strategies will incorporate all of these elements. 3.2.1 Bootable Backups “Bootable” backups are mirrored images of your entire hard drive, down to temporary files, icons, and system files. With a bootable backup, you can restore your entire computer in the event of a hard drive failure or a corruption of the operating system files. They are named as such because you can plug in the external drive that you are using for this backup and literally boot your computer up from that drive (typically a very slow process). These backups are often made less frequently because they can be resource intensive and it is best not to use your operating system while creating a clone. They are typically made to an external hard drive, which is subject to similar failure rates as the hard drives inside your computer. So bootable drives need to be replaced every few years to maintain their reliability. Both major operating systems come with applications for creating clones of your main hard drive that are bootable, and there are a number of third party applications that provide this service as well. 3.2.2 Incremental Backups Incremental backups are designed to keep multiple copies of a single file (how often depends on the type of software you use and the settings you select). These can be used to restore an older copy of a file if work is lost or a newer file is corrupted. Apple’s TimeMachine is a great example of an incremental backup - when kept on, it creates hourly backups of files that have been changed, daily backups for the previous month, and weekly backups for previous months. Once the disk is full, the oldest backups are deleted. Dropbox also provides a similar service, retaining all previous versions of files (and deleted files) for thirty days. Incremental backups are typically good options for recovering files that have been recently changed (again, depending on the software you use and the settings you select). Since they run frequently (every time a file is changed or every hour, for example), recent changes tend to get captured. They can be limited in terms of their long-term storage - it may not be possible to recover older versions of a file past a few weeks. They are also not always good solutions for recreating your entire computer since they do not save all necessary program and operating system files, and may be cumbersome to work with if you need to recover a large quantity of files. Like bootable backups, these are typically stored on external hard drives that need to be replaced on a regular basis. In addition to the aforementioned Apple TimeMachine, the Windows OS also comes with a built-in service for creating incremental backups. Dropbox is a good option if you have a small number of files, but you may find the need to upgrade to a paid account if you have a large amount of data. 3.2.3 Cloud Backups Cloud backup services like Backblaze or Crashplan offer comprehensive backup solutions for customers. These plans typically require a monthly subscription fee to maintain access to your backups. While bootable backups protect against hard drive failure and incremental backups protect against data corruption, cloud backups protect against catastrophic events like robberies, fires, and other natural disasters. A fire or a tornado that affect your house may destroy your laptop and any external hard drives you use for backup, but your cloud backup will be unaffected. 3.2.4 A Workflow for Backups Just as we need a workflow for approaching file management, it is also important to establish a routine for backups. With backups, the most successful workflows are those that require next to no effort on your part. If you primarily use a desktop, this can be as simple as leaving two external hard drives plugged into your computer since most backup software can be set to run automatically. If you have tasks that require you to manually do something (plug an external hard drive into your computer, for instance), create a reminder for yourself on a paper calendar or a digital calendar or to-do list application. For this course in particular, it is imperative that you backup the data on your flash drive. A number of possibilities exist for accomplishing this: Keep a local copy of your flash drive’s files on your computer. Keep a .zip archive of your files in a service like Dropbox or Google Drive. (Using a .zip archive will prevent issues with your .git repositories.) Maintain a second flash drive copies of all of your files. Whatever solution you select, make sure you regularly update your backup. The more often you keep your backup archive updated, the less stressful and disruptive losing your drive will be. This will likely be a manual task, so follow the guidance above about creating a repeating calendar event or to-do list task reminder. -->"],
["introduction-to-github.html", "4 Introduction to GitHub", " 4 Introduction to GitHub Much of our interaction this semester outside of class will utilize GitHub.com (or just “GitHub”). GitHub is a web service that is a social network for programmers, developers, data scientists, researchers, and academics. It is also a tool for collaborating on projects, especially projects that involve writing code. We’ll use GitHub as an alternative to Blackboard, the course management system that students are typically familiar with. Course materials will be posted there, and GitHub’s features will allow you to copy them and keep them updated as changes are made. You’ll also use GitHub to submit assignments for grading, and we’ll give you feedback and grades via GitHub as well. "],
["git.html", "4.1 Git", " 4.1 Git GitHub is a web application that utilizes Git: Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. Essentially, Git is a project-wide system for tracking changes to files. Think of it as Microsoft office’s track changes feature on steroids - every change to every file in a directory (a “repository” or “repo” in Git-lingo) is tracked. You do no need to host files online to use Git. If you have a project saved locally (say, a doctoral thesis), you could utilize Git to version control that project without ever uploading it to the Internet. For our purposes, this is just about all you need to know about Git. If you want to learn more, Git’s ‘About’ page is a great place to start. "],
["more-git-lingo.html", "4.2 More Git-lingo", " 4.2 More Git-lingo Beyond “repositories”, there are a few additional terms that are specific to Git and that are helpful to know: Clone: Make an identical copy of a repository on your local hard drive. Commit: Approve any changes you have made to a repository. Sync: For cloned repositories, files that have been changed need to be synced or pushed to GitHub.com after they are committed. "],
["github-com.html", "4.3 GitHub.com", " 4.3 GitHub.com GitHub is a web service that can host projects using Git’s version tracking. It is widely used by programmers, software developers, data scientists, and academics to host and collaborate projects. GitHub is an excellent way to backup files for a project since you can “sync” changes made to a repository up to GitHub’s servers. It is also an excellent way to collaborate on files with colleagues while also using Git’s version tracking. Repositories can be either public (like all of the repos for our seminar) or private, which means that only people who have been given access to can view the contents of the repo. Private repos require an upgraded account, which retails for $7/month. Students can get access to GitHub’s paid services for free, however, by signing up for a free student account. This will give you access to private repositories for as long as you are a student. "],
["the-workflow-of-git-and-github.html", "4.4 The Workflow of Git and GitHub", " 4.4 The Workflow of Git and GitHub The typical approach to versioning for many students is manual. For a hypothetical class response paper, it might look something like this: The author made an initial copy of the paper, and then used a haphazard and inconsistent approach for naming subsequent copies of the paper. We can presume that changes were made in a linear fashion, though it is easy to make changes to, say, First Response Paper 2.doc after First Response Paper 3.doc has been created and edited. Instead of saving copies of their hypothetical paper, a student using GitHub could write the paper in a single document, commiting their changes as they progress to take “snapshots” of their progress. These snapshots contain information on changes the student has made, tracked line-by-line. So, at each point in which a new document would have been created in the typical workflow, a student using GitHub would simply commit their changes: Git provides a number of useful features beyond simply tracking changes. Eachc commit is accompanied a message. These messages must have a short summary that appears on GitHub and can also have a longer description that can be used to describe in detail what changes are being applied with a specific commit: Messages, combined with the changes that are tracked, allow users to trace the development of a single document or an entire project overtime: This means that, if necessary, the project can also be rolled back to an earlier period. Finally, users can sync their commits with GitHub.com, hosting their changes and their data in a way that protects them against certain types of computer failures and also allowing them to easily share their work with others. "],
["github-repositories.html", "4.5 GitHub Repositories", " 4.5 GitHub Repositories Users of GitHub.com adhere to a couple of norms with their repositories that are worth knowing about. Repositories cannot have spaces in their names (much like variables in Stata), so the naming conventions that we will discuss in relation to Stata this semester all apply to GitHub as well! Public GitHub repositories also contain (typically) at least three core files: A license file - since the data is out there for public consumption, it is important to think about how that data is licensed. The norm among GitHub users has been to use open source licenses, which let others edit and adapt your work. There are a range of licenses that are commonly used on GitHub. A README file - this describes the purpose and content of the project. A .gitignore file - this stops certain types of files from being swept up by GitHub when a user syncs their files with a server. "],
["storing-github-repositories.html", "4.6 Storing GitHub Repositories", " 4.6 Storing GitHub Repositories When you clone your repositories, you will be prompted to save them on your computer. There are a number of ways in which this process can introduce sources for trouble down the road. The principle way that I have seen students run into problems with GitHub is by storing repositories on cloud storage services like Dropbox or Google Drive. In order to avoid any issues, I advise against storing GitHub repositories in an area of your computer that syncs with a cloud service. "],
["github-issues.html", "4.7 GitHub Issues", " 4.7 GitHub Issues GitHub has a powerful tool for interaction called Issues. These can be accessed by opening a repository and then clicking on the “Issues” tab. Issues can be “opened” by anyone with access to the repository. They allow for a conversation to occur in the form of messages posted within the Issue itself. Files can be attached to Issues, and the messages can contain Markdown formatting. Once the conversation is complete, issues can be marked as “closed”, which moves them into a secondary view on the website so that they are archived. We’ll use issues for both assignment feedback and grading. Please keep up with issues are they appear, and feel free to follow-up with specific questions about your grade or the assignment feedback in the Issue conversation. Once you are satisfied, please mark the issue as closed. "],
["github-desktop-application.html", "4.8 GitHub Desktop Application", " 4.8 GitHub Desktop Application GitHub Desktop is a tool that allows you to easily clone repositories hosted on GitHub, commit changes to them, and then sync those changes up to the website. You can also create new repositories, however this is not task you will have to do this semester. GitHub Desktop is not a fully functional desktop version of GitHub. For our purposes, it is important to note that the Desktop application will not let you easily identify when repositories have been updated by other users, view Wikis associated with repositories, or view Issues. "],
["learning-more.html", "4.9 Learning More", " 4.9 Learning More GitHub has a resources page with links to websites that are great for helping you learn more about how Git and GitHub work! The next chapter also has some additional GitHub and Git information. One particularly great tutorial walks you through the command line process for creating and using a git repository. Even if you do not want to use Git via the command line, the tutorial does an excellent job of describing the logic and sequence behind the Git workflow. "]
]
